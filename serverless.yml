org: allenwalkerd3
app: aws-python-flask-dynamodb-api-project
service: aws-python-flask-dynamodb-api-project

frameworkVersion: '2'

custom:
  tableName: 'users-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      port: 8000
      inMemory: true

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  stage: dev
  region: eu-west-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}
    IS_OFFLINE: true

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    # events:
    #   - http:
    #       path: /
    #       method: ANY
    #   - http:
    #       path: /{proxy+}
    #       method: ANY
    getUser:
      handler: wsgi_handler.handler
      events:
        - http: 'GET /users/{proxy+}'
    createUser:
      handler: wsgi_handler.handler
      events:
        - http: 'POST /users'

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dynamodb-local

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
